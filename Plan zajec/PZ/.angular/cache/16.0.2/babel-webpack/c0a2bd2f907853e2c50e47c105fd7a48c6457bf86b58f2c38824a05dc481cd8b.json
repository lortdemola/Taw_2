{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass SpinPipe {\n  transform(value) {\n    const min = 220; // Minimum RGB value\n    const range = 35; // Range of variation\n    const red = min + Math.floor(Math.random() * range);\n    const green = min + Math.floor(Math.random() * range);\n    const blue = min + Math.floor(Math.random() * range);\n    if (value.startsWith('#')) {\n      return `#${red.toString(16)}${green.toString(16)}${blue.toString(16)}`;\n    } else if (value.startsWith('rgb(')) {\n      return `rgb(${red}, ${green}, ${blue})`;\n    } else if (value.startsWith('rgba(')) {\n      const alpha = Math.random().toFixed(2);\n      return `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n    } else {\n      return `rgb(${red}, ${green}, ${blue})`;\n    }\n  }\n}\nSpinPipe.ɵfac = function SpinPipe_Factory(t) {\n  return new (t || SpinPipe)();\n};\nSpinPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"spin\",\n  type: SpinPipe,\n  pure: true\n});\nexport { SpinPipe };","map":{"version":3,"names":["SpinPipe","transform","value","min","range","red","Math","floor","random","green","blue","startsWith","toString","alpha","toFixed","pure"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\TAW\\E_hop\\E_hop\\src\\app\\pipes\\spin.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'spin'\n})\nexport class SpinPipe implements PipeTransform {\n\n  transform(value: string): string {\n    const min = 220; // Minimum RGB value\n    const range = 35; // Range of variation\n    const red = min + Math.floor(Math.random() * range);\n    const green = min + Math.floor(Math.random() * range);\n    const blue = min + Math.floor(Math.random() * range);\n\n    if (value.startsWith('#')) {\n      return `#${red.toString(16)}${green.toString(16)}${blue.toString(16)}`;\n    } else if (value.startsWith('rgb(')) {\n      return `rgb(${red}, ${green}, ${blue})`;\n    } else if (value.startsWith('rgba(')) {\n      const alpha = Math.random().toFixed(2);\n      return `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n    } else {\n      return `rgb(${red}, ${green}, ${blue})`;\n    }\n  }\n\n}\n"],"mappings":";AAEA,MAGaA,QAAQ;EAEnBC,SAASA,CAACC,KAAa;IACrB,MAAMC,GAAG,GAAG,GAAG,CAAC,CAAC;IACjB,MAAMC,KAAK,GAAG,EAAE,CAAC,CAAC;IAClB,MAAMC,GAAG,GAAGF,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,KAAK,CAAC;IACnD,MAAMK,KAAK,GAAGN,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,KAAK,CAAC;IACrD,MAAMM,IAAI,GAAGP,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,KAAK,CAAC;IAEpD,IAAIF,KAAK,CAACS,UAAU,CAAC,GAAG,CAAC,EAAE;MACzB,OAAO,IAAIN,GAAG,CAACO,QAAQ,CAAC,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAQ,CAAC,EAAE,CAAC,GAAGF,IAAI,CAACE,QAAQ,CAAC,EAAE,CAAC,EAAE;KACvE,MAAM,IAAIV,KAAK,CAACS,UAAU,CAAC,MAAM,CAAC,EAAE;MACnC,OAAO,OAAON,GAAG,KAAKI,KAAK,KAAKC,IAAI,GAAG;KACxC,MAAM,IAAIR,KAAK,CAACS,UAAU,CAAC,OAAO,CAAC,EAAE;MACpC,MAAME,KAAK,GAAGP,IAAI,CAACE,MAAM,EAAE,CAACM,OAAO,CAAC,CAAC,CAAC;MACtC,OAAO,QAAQT,GAAG,KAAKI,KAAK,KAAKC,IAAI,KAAKG,KAAK,GAAG;KACnD,MAAM;MACL,OAAO,OAAOR,GAAG,KAAKI,KAAK,KAAKC,IAAI,GAAG;;EAE3C;;AAnBWV,QAAQ,C;mBAARA,QAAQ;AAAA;AAARA,QAAQ,C;;QAARA,QAAQ;EAAAe,IAAA;AAAA;SAARf,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}