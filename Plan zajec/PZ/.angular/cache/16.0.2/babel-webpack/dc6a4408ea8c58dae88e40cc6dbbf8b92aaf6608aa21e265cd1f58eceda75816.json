{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction ScheduleFormComponent_tr_2_tr_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 3)(1, \"td\")(2, \"label\", 9);\n    i0.ɵɵtext(3, \"Time:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"label\", 11);\n    i0.ɵɵtext(7, \"Course:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function ScheduleFormComponent_tr_2_tr_7_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const i_r6 = restoredCtx.index;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.removeCourse(i_r6));\n    });\n    i0.ɵɵtext(10, \"Remove Course\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r6);\n  }\n}\nfunction ScheduleFormComponent_tr_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 3)(1, \"td\")(2, \"label\", 4);\n    i0.ɵɵtext(3, \"Day:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"tbody\", 6);\n    i0.ɵɵtemplate(7, ScheduleFormComponent_tr_2_tr_7_Template, 11, 1, \"tr\", 2);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function ScheduleFormComponent_tr_2_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.addCourse());\n    });\n    i0.ɵɵtext(9, \"Add Course\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 8);\n    i0.ɵɵtext(11, \"Submit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"pre\");\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"json\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const x_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", x_r2);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.formArr.controls);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 3, ctx_r0.scheduleForm.value));\n  }\n}\nclass ScheduleFormComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.createContactForm();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      day: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  get formArr() {\n    return this.scheduleForm.get('courses');\n  }\n  ngOnInit() {}\n  createCourseFormGroup() {\n    return this.formBuilder.group({\n      time: ['', Validators.required],\n      course: ['', Validators.required]\n      // Add more fields as needed for each course\n    });\n  }\n\n  addCourse() {\n    const coursesArray = this.scheduleForm.get('courses');\n    coursesArray.push(this.createCourseFormGroup());\n  }\n  removeCourse(index) {\n    const coursesArray = this.scheduleForm.get('courses');\n    coursesArray.removeAt(index);\n  }\n  submitSchedule() {\n    if (this.scheduleForm.valid) {\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n    }\n  }\n}\nScheduleFormComponent.ɵfac = function ScheduleFormComponent_Factory(t) {\n  return new (t || ScheduleFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nScheduleFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleFormComponent,\n  selectors: [[\"app-schedule-form\"]],\n  decls: 3,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"formArrayName\", \"schedule\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [3, \"formGroupName\"], [\"for\", \"day\"], [\"type\", \"text\", \"id\", \"day\", \"formControlName\", \"day\"], [\"formArrayName\", \"courses\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"submit\"], [\"for\", \"time\"], [\"type\", \"text\", \"id\", \"time\", \"formControlName\", \"time\"], [\"for\", \"course\"], [\"type\", \"text\", \"id\", \"course\", \"formControlName\", \"course\"]],\n  template: function ScheduleFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ScheduleFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitSchedule();\n      });\n      i0.ɵɵelementStart(1, \"tbody\", 1);\n      i0.ɵɵtemplate(2, ScheduleFormComponent_tr_2_Template, 15, 5, \"tr\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.scheduleForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.scheduleForm.controls);\n    }\n  },\n  dependencies: [i2.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName, i2.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ScheduleFormComponent };","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","ScheduleFormComponent_tr_2_tr_7_Template_button_click_9_listener","restoredCtx","ɵɵrestoreView","_r9","i_r6","index","ctx_r8","ɵɵnextContext","ɵɵresetView","removeCourse","ɵɵproperty","ɵɵtemplate","ScheduleFormComponent_tr_2_tr_7_Template","ScheduleFormComponent_tr_2_Template_button_click_8_listener","_r11","ctx_r10","addCourse","x_r2","ɵɵadvance","ctx_r0","formArr","controls","ɵɵtextInterpolate","ɵɵpipeBind1","scheduleForm","value","ScheduleFormComponent","constructor","formBuilder","createContactForm","group","owner","required","day","courses","array","createCourseFormGroup","get","ngOnInit","time","course","coursesArray","push","removeAt","submitSchedule","valid","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","ScheduleFormComponent_Template","rf","ctx","ScheduleFormComponent_Template_form_ngSubmit_0_listener","ScheduleFormComponent_tr_2_Template"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-form\\schedule-form.component.ts","C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-form\\schedule-form.component.html"],"sourcesContent":["import { Component , OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-schedule-form',\n  templateUrl: './schedule-form.component.html',\n  styleUrls: ['./schedule-form.component.css']\n})\nexport class ScheduleFormComponent  implements OnInit {\n\n  scheduleForm!: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.createContactForm();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      day: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  get formArr() {\n    return this.scheduleForm.get('courses') as FormArray;\n  }\n  ngOnInit(): void {\n  }\n\n  createCourseFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      time: ['', Validators.required],\n      course: ['', Validators.required],\n      // Add more fields as needed for each course\n    });\n  }\n\n  addCourse(): void {\n    const coursesArray = this.scheduleForm.get('courses') as FormArray;\n    coursesArray.push(this.createCourseFormGroup());\n  }\n\n  removeCourse(index: number): void {\n    const coursesArray = this.scheduleForm.get('courses') as FormArray;\n    coursesArray.removeAt(index);\n  }\n\n  submitSchedule(): void {\n    if (this.scheduleForm.valid) {\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n    }\n  }\n}\n","<form [formGroup]=\"scheduleForm\" (ngSubmit)=\"submitSchedule()\">\n\n\n  <tbody formArrayName=\"schedule\">\n  <tr *ngFor=\"let day of scheduleForm.controls;let x = index; let y = last\" [formGroupName]=\"x\">\n    <td>\n    <label for=\"day\">Day:</label>\n  <input type=\"text\" id=\"day\" formControlName=\"day\" />\n    </td>\n    <td>\n  <tbody formArrayName=\"courses\">\n    <tr *ngFor=\"let course of formArr.controls; let i = index; let l = last\" [formGroupName]=\"i\">\n      <td>\n      <label for=\"time\">Time:</label>\n      <input type=\"text\" id=\"time\" formControlName=\"time\" />\n      </td>\n      <td>\n      <label for=\"course\">Course:</label>\n      <input type=\"text\" id=\"course\" formControlName=\"course\" />\n      </td>\n      <button type=\"button\" (click)=\"removeCourse(i)\">Remove Course</button>\n    </tr>\n  </tbody>\n  </td>\n  <button type=\"button\" (click)=\"addCourse()\">Add Course</button>\n\n  <button type=\"submit\">Submit</button>\n  <pre>{{ scheduleForm.value | json }}</pre>\n</form>\n"],"mappings":"AACA,SAA4CA,UAAU,QAAQ,gBAAgB;;;;;;;ICU1EC,EAAA,CAAAC,cAAA,YAA6F;IAEzED,EAAA,CAAAE,MAAA,YAAK;IAAAF,EAAA,CAAAG,YAAA,EAAQ;IAC/BH,EAAA,CAAAI,SAAA,gBAAsD;IACtDJ,EAAA,CAAAG,YAAA,EAAK;IACLH,EAAA,CAAAC,cAAA,SAAI;IACgBD,EAAA,CAAAE,MAAA,cAAO;IAAAF,EAAA,CAAAG,YAAA,EAAQ;IACnCH,EAAA,CAAAI,SAAA,gBAA0D;IAC1DJ,EAAA,CAAAG,YAAA,EAAK;IACLH,EAAA,CAAAC,cAAA,gBAAgD;IAA1BD,EAAA,CAAAK,UAAA,mBAAAC,iEAAA;MAAA,MAAAC,WAAA,GAAAP,EAAA,CAAAQ,aAAA,CAAAC,GAAA;MAAA,MAAAC,IAAA,GAAAH,WAAA,CAAAI,KAAA;MAAA,MAAAC,MAAA,GAAAZ,EAAA,CAAAa,aAAA;MAAA,OAASb,EAAA,CAAAc,WAAA,CAAAF,MAAA,CAAAG,YAAA,CAAAL,IAAA,CAAe;IAAA,EAAC;IAACV,EAAA,CAAAE,MAAA,qBAAa;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;IATCH,EAAA,CAAAgB,UAAA,kBAAAN,IAAA,CAAmB;;;;;;IAP9FV,EAAA,CAAAC,cAAA,YAA8F;IAE3ED,EAAA,CAAAE,MAAA,WAAI;IAAAF,EAAA,CAAAG,YAAA,EAAQ;IAC/BH,EAAA,CAAAI,SAAA,eAAoD;IAClDJ,EAAA,CAAAG,YAAA,EAAK;IACLH,EAAA,CAAAC,cAAA,SAAI;IAEJD,EAAA,CAAAiB,UAAA,IAAAC,wCAAA,iBAUK;IACPlB,EAAA,CAAAG,YAAA,EAAQ;IAERH,EAAA,CAAAC,cAAA,gBAA4C;IAAtBD,EAAA,CAAAK,UAAA,mBAAAc,4DAAA;MAAAnB,EAAA,CAAAQ,aAAA,CAAAY,IAAA;MAAA,MAAAC,OAAA,GAAArB,EAAA,CAAAa,aAAA;MAAA,OAASb,EAAA,CAAAc,WAAA,CAAAO,OAAA,CAAAC,SAAA,EAAW;IAAA,EAAC;IAACtB,EAAA,CAAAE,MAAA,iBAAU;IAAAF,EAAA,CAAAG,YAAA,EAAS;IAE/DH,EAAA,CAAAC,cAAA,iBAAsB;IAAAD,EAAA,CAAAE,MAAA,cAAM;IAAAF,EAAA,CAAAG,YAAA,EAAS;IACrCH,EAAA,CAAAC,cAAA,WAAK;IAAAD,EAAA,CAAAE,MAAA,IAA+B;;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAvBgCH,EAAA,CAAAgB,UAAA,kBAAAO,IAAA,CAAmB;IAOpEvB,EAAA,CAAAwB,SAAA,GAAqB;IAArBxB,EAAA,CAAAgB,UAAA,YAAAS,MAAA,CAAAC,OAAA,CAAAC,QAAA,CAAqB;IAgBzC3B,EAAA,CAAAwB,SAAA,GAA+B;IAA/BxB,EAAA,CAAA4B,iBAAA,CAAA5B,EAAA,CAAA6B,WAAA,QAAAJ,MAAA,CAAAK,YAAA,CAAAC,KAAA,EAA+B;;;ADxBtC,MAKaC,qBAAqB;EAIhCC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAC7B,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EACAA,iBAAiBA,CAAA;IACf,IAAI,CAACL,YAAY,GAAG,IAAI,CAACI,WAAW,CAACE,KAAK,CAAC;MACzCC,KAAK,EAAE,CAAC,EAAE,EAAEtC,UAAU,CAACuC,QAAQ,CAAC;MAChCC,GAAG,EAAE,CAAC,EAAE,EAAExC,UAAU,CAACuC,QAAQ,CAAC;MAC9BE,OAAO,EAAE,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC,CAAC,IAAI,CAACC,qBAAqB,EAAE,CAAC;KAC/D,CAAC;EACJ;EACA,IAAIhB,OAAOA,CAAA;IACT,OAAO,IAAI,CAACI,YAAY,CAACa,GAAG,CAAC,SAAS,CAAc;EACtD;EACAC,QAAQA,CAAA,GACR;EAEAF,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACR,WAAW,CAACE,KAAK,CAAC;MAC5BS,IAAI,EAAE,CAAC,EAAE,EAAE9C,UAAU,CAACuC,QAAQ,CAAC;MAC/BQ,MAAM,EAAE,CAAC,EAAE,EAAE/C,UAAU,CAACuC,QAAQ;MAChC;KACD,CAAC;EACJ;;EAEAhB,SAASA,CAAA;IACP,MAAMyB,YAAY,GAAG,IAAI,CAACjB,YAAY,CAACa,GAAG,CAAC,SAAS,CAAc;IAClEI,YAAY,CAACC,IAAI,CAAC,IAAI,CAACN,qBAAqB,EAAE,CAAC;EACjD;EAEA3B,YAAYA,CAACJ,KAAa;IACxB,MAAMoC,YAAY,GAAG,IAAI,CAACjB,YAAY,CAACa,GAAG,CAAC,SAAS,CAAc;IAClEI,YAAY,CAACE,QAAQ,CAACtC,KAAK,CAAC;EAC9B;EAEAuC,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACpB,YAAY,CAACqB,KAAK,EAAE;MAC3B;MACA;IAAA;EAEJ;;AA3CWnB,qBAAqB,C;mBAArBA,qBAAqB,EAAAhC,EAAA,CAAAoD,iBAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;AAArBtB,qBAAqB,C;QAArBA,qBAAqB;EAAAuB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCRlC7D,EAAA,CAAAC,cAAA,cAA+D;MAA9BD,EAAA,CAAAK,UAAA,sBAAA0D,wDAAA;QAAA,OAAYD,GAAA,CAAAZ,cAAA,EAAgB;MAAA,EAAC;MAG5DlD,EAAA,CAAAC,cAAA,eAAgC;MAChCD,EAAA,CAAAiB,UAAA,IAAA+C,mCAAA,iBAA8F;MAD9FhE,EAAA,CAAAG,YAAA,EAAgC;;;MAH5BH,EAAA,CAAAgB,UAAA,cAAA8C,GAAA,CAAAhC,YAAA,CAA0B;MAIV9B,EAAA,CAAAwB,SAAA,GAAyB;MAAzBxB,EAAA,CAAAgB,UAAA,YAAA8C,GAAA,CAAAhC,YAAA,CAAAH,QAAA,CAAyB;;;;;;SDIlCK,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}