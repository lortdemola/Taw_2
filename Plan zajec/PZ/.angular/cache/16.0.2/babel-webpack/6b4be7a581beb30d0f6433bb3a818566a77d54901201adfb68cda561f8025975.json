{"ast":null,"code":"import { FormArray, AbstractControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"../../services/data.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction ScheduleAdminComponent_tr_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 6)(1, \"label\", 7);\n    i0.ɵɵtext(2, \"From:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 8);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"label\", 9);\n    i0.ɵɵtext(6, \"To:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"p\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const course_r1 = ctx.$implicit;\n    const x_r2 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", x_r2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(course_r1.get(\"name\"));\n  }\n}\nclass ScheduleAdminComponent {\n  formatTimeRange(timeF, timeT, Course) {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(authService, dataService, formBuilder) {\n    this.authService = authService;\n    this.dataService = dataService;\n    this.formBuilder = formBuilder;\n    this.hmm3 = this.formBuilder.group({});\n    this.weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    this.FormArray = FormArray;\n    this.AbstractControl = AbstractControl;\n    this.createContactForm();\n    this.loadSchedule();\n  }\n  ngOnInit() {}\n  createContactForm() {\n    this.scheduleList = this.formBuilder.group({\n      usersSchedule: this.formBuilder.array([])\n    });\n  }\n  get formArr2() {\n    return this.scheduleList.get('usersSchedule');\n  }\n  loadSchedule() {\n    this.dataService.getAllSchedules().subscribe(data => {\n      let temp = data;\n      let temp2;\n      for (const datum of temp) {\n        console.log(datum);\n        this.authService.getUserById(datum['owner']).subscribe(data2 => {\n          let schedule = '';\n          temp2 = data2;\n          console.log('User: ' + temp2['name']);\n          for (const sss of datum['scheduleEntries']) {\n            console.log(' Day: ' + sss['dayOfWeek'] + ' ,Courses Amount: ' + sss['courses'].length);\n            console.log('ok1');\n            schedule += sss['dayOfWeek'] + ' ,Courses Amount: ' + sss['courses'].length + '  |  ';\n            console.log('ok2');\n          }\n          this.formArr2.push(this.formBuilder.group({\n            name: [temp2['name']],\n            scheduleData: [schedule]\n          }));\n          console.log('ok3');\n        });\n      }\n    });\n  }\n  submitSchedule() {\n    if (this.scheduleList.valid) {\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n      this.dataService.createSchedule(this.scheduleList.value).subscribe(() => {\n        console.log(\"created\");\n      });\n    } else {\n      console.log(\"!ok\");\n    }\n  }\n}\nScheduleAdminComponent.ɵfac = function ScheduleAdminComponent_Factory(t) {\n  return new (t || ScheduleAdminComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.DataService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nScheduleAdminComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleAdminComponent,\n  selectors: [[\"app-schedule-admin\"]],\n  decls: 11,\n  vars: 5,\n  consts: [[2, \"height\", \"88vh\", \"min-width\", \"100vw\", 3, \"formGroup\", \"ngSubmit\"], [\"formArrayName\", \"usersSchedule\", 1, \"row\"], [\"class\", \"column\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [2, \"color\", \"white\"], [\"type\", \"button\", 1, \"btn\", \"btn-dark\", \"buttons\"], [\"type\", \"submit\", 1, \"btn\", \"btn-light\", \"buttons\"], [1, \"column\", 3, \"formGroupName\"], [\"for\", \"timeFrom\"], [\"id\", \"timeFrom\", \"formControlName\", \"name\"], [\"for\", \"timeTo\"], [\"id\", \"timeTo\", \"formControlName\", \"scheduleData\"]],\n  template: function ScheduleAdminComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ScheduleAdminComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitSchedule();\n      });\n      i0.ɵɵelementStart(1, \"tbody\", 1);\n      i0.ɵɵtemplate(2, ScheduleAdminComponent_tr_2_Template, 8, 2, \"tr\", 2);\n      i0.ɵɵelementStart(3, \"tr\")(4, \"pre\", 3);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"json\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵtext(8, \"add Day\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 5);\n      i0.ɵɵtext(10, \"Submit\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.scheduleList);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.formArr2.controls);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 3, ctx.formArr2.value));\n    }\n  },\n  dependencies: [i4.NgForOf, i3.ɵNgNoValidate, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName, i3.FormArrayName, i4.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ScheduleAdminComponent };","map":{"version":3,"names":["FormArray","AbstractControl","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty","x_r2","ɵɵadvance","ɵɵtextInterpolate","course_r1","get","ScheduleAdminComponent","formatTimeRange","timeF","timeT","Course","timeFrom","value","timeTo","constructor","authService","dataService","formBuilder","hmm3","group","weekdays","createContactForm","loadSchedule","ngOnInit","scheduleList","usersSchedule","array","formArr2","getAllSchedules","subscribe","data","temp","temp2","datum","console","log","getUserById","data2","schedule","sss","length","push","name","scheduleData","submitSchedule","valid","createSchedule","ɵɵdirectiveInject","i1","AuthService","i2","DataService","i3","FormBuilder","selectors","decls","vars","consts","template","ScheduleAdminComponent_Template","rf","ctx","ɵɵlistener","ScheduleAdminComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","ScheduleAdminComponent_tr_2_Template","controls","ɵɵpipeBind1"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-admin\\schedule-admin.component.ts","C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-admin\\schedule-admin.component.html"],"sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, FormArray, Validators, AbstractControl} from '@angular/forms';\nimport { ValidatorFn } from '@angular/forms';\nimport {AuthService} from \"../../services/auth.service\";\nimport {DataService} from \"../../services/data.service\";\n\n\n\n\n@Component({\n  selector: 'app-schedule-admin',\n  templateUrl: './schedule-admin.component.html',\n  styleUrls: ['./schedule-admin.component.css']\n})\nexport class ScheduleAdminComponent implements OnInit {\n  hmm!: any ;\n  hmm2!: any ;\n  hmm3: FormGroup = this.formBuilder.group({});\n  scheduleList!: FormGroup;\n  weekdays: string[] = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  formatTimeRange(timeF: HTMLInputElement,timeT: HTMLInputElement,Course: any): string {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(public authService: AuthService,private dataService: DataService,private formBuilder: FormBuilder) {\n    this.createContactForm();\n    this.loadSchedule();\n  }\n  ngOnInit(): void {\n  }\n\n  createContactForm() {\n    this.scheduleList = this.formBuilder.group({\n      usersSchedule: this.formBuilder.array([])\n    });\n  }\n\n\n\n  get formArr2() {\n    return this.scheduleList.get('usersSchedule') as FormArray;\n  }\n\n  loadSchedule() {\n    this.dataService.getAllSchedules().subscribe(data => {\n\n      let temp:any = data as JSON;\n      let temp2:any;\n\n      for (const datum of temp) {\n\n        console.log(datum)\n        this.authService.getUserById(datum['owner']).subscribe(data2=>\n        {\n          let schedule: string = '';\n          temp2=data2 as JSON;\n          console.log('User: '+temp2['name']);\n          for (const sss of datum['scheduleEntries']) {\n            console.log(' Day: '+sss['dayOfWeek']+' ,Courses Amount: '+sss['courses'].length);\n            console.log('ok1');\n            schedule += sss['dayOfWeek']+' ,Courses Amount: '+sss['courses'].length+'  |  ';\n            console.log('ok2');\n          }\n          this.formArr2.push(this.formBuilder.group({\n            name: [temp2['name']],\n            scheduleData: [schedule]\n          }));\n          console.log('ok3');\n        });\n      }\n\n\n\n\n\n\n\n\n    });\n  }\n  submitSchedule(): void {\n    if (this.scheduleList.valid) {\n\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n      this.dataService.createSchedule(this.scheduleList.value).subscribe(()=>\n      {\n        console.log(\"created\");\n      });\n    }else{\n      console.log(\"!ok\");\n    }\n  }\n\n  protected readonly FormArray = FormArray;\n  protected readonly AbstractControl = AbstractControl;\n}\n","<form style=\"height: 88vh;min-width: 100vw\" [formGroup]=\"scheduleList\" (ngSubmit)=\"submitSchedule()\">\n\n  <tbody class=\"row\" formArrayName=\"usersSchedule\">\n  <tr class=\"column\" *ngFor=\"let course of formArr2.controls; let x = index;\" [formGroupName]=\"x\">\n    <label for=\"timeFrom\">From:</label>\n    <p  id=\"timeFrom\" formControlName=\"name\" >{{course.get('name')}}</p>\n    <label for=\"timeTo\">To:</label>\n    <p id=\"timeTo\"  formControlName=\"scheduleData\"></p>\n\n  </tr>\n  <tr>\n    <pre style=\"color: white\">{{formArr2.value |json}}</pre>\n\n  </tr>\n  <button type=\"button\"  class=\"btn btn-dark buttons\">add Day</button>\n  <button class=\"btn btn-light buttons\" type=\"submit\">Submit</button>\n  </tbody>\n\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}