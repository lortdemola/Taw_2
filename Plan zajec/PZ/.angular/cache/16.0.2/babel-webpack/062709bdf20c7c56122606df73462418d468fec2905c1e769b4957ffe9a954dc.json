{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nfunction timeRangeValidator() {\n  return control => {\n    const timeRange = control.value;\n    const min = '7';\n    const max = '21';\n    if (!timeRange) {\n      return null; // Empty value, no validation needed\n    }\n    // Regular expression to match the time range format (hh:mm-hh:mm)\n    const timeRangePattern = /^\\d{2}:\\d{2}-\\d{2}:\\d{2}$/;\n    if (!timeRange.match(timeRangePattern)) {\n      return {\n        invalidTimeRange: true\n      }; // Invalid format\n    }\n    // Split the time range into start and end times\n    const [startTime, endTime] = timeRange.split('-');\n    const [startHour, startMinute] = startTime.split(':');\n    const [endHour, endMinute] = endTime.split(':');\n    // Convert the time components to numbers\n    const startHourNum = Number(startHour);\n    const startMinuteNum = Number(startMinute);\n    const endHourNum = Number(endHour);\n    const endMinuteNum = Number(endMinute);\n    // Check if the time components are valid\n    if (isNaN(startHourNum) || isNaN(startMinuteNum) || isNaN(endHourNum) || isNaN(endMinuteNum) || startHourNum < 7 || startHourNum > 21 || startMinuteNum < 0 || startMinuteNum > 59 || endHourNum < startHourNum || endHourNum > 21 || endMinuteNum < startMinuteNum || endMinuteNum > 59) {\n      return {\n        invalidTimeRange: true\n      }; // Invalid time components\n    }\n    // Check if the start time is earlier than the end time\n    if (startHourNum > endHourNum || startHourNum === endHourNum && startMinuteNum >= endMinuteNum) {\n      return {\n        invalidTimeRange: true\n      }; // Start time is later or equal to end time\n    }\n\n    return null; // Valid time range\n  };\n}\n\nlet ScheduleFormComponent = class ScheduleFormComponent {\n  formatTimeRange(timeF, timeT, Course) {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    Course.get('time')?.setValue((timeFrom + \"-\" + timeTo).toString());\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(authService, formBuilder) {\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    this.createContactForm();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      scheduleEntries: this.formBuilder.array([this.createScheduleEntryFormGroup()])\n    });\n    this.scheduleForm.get('owner')?.setValue(this.authService.currentUser.userId);\n  }\n  createScheduleEntryFormGroup() {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  createCourseFormGroup() {\n    return this.formBuilder.group({\n      time: ['', [Validators.required, timeRangeValidator()]],\n      course: ['', [Validators.required, Validators.minLength(2)]]\n    });\n  }\n  get formArr() {\n    return this.formArr2.at(0).get('courses');\n  }\n  get formArr2() {\n    return this.scheduleForm.get('scheduleEntries');\n  }\n  addRow({\n    obj\n  }) {\n    return this.formBuilder.group({\n      time: [obj.time, [Validators.required, timeRangeValidator()]],\n      course: [obj.course, [Validators.required, timeRangeValidator()]]\n    });\n  }\n  addCol() {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  addNewRow() {\n    let obj1 = {\n      time: '',\n      course: ''\n    };\n    this.formArr.push(this.addRow({\n      obj: obj1\n    }));\n    this.formArr.clearValidators();\n  }\n  addNewCol() {\n    let obj1 = {\n      time: '',\n      course: ''\n    };\n    this.formArr2.push(this.addCol());\n    this.formArr2.clearValidators();\n  }\n  ngOnInit() {}\n  addCourse() {\n    const coursesArray = this.scheduleForm.get('courses');\n    coursesArray.push(this.createCourseFormGroup());\n  }\n  removeCourse(index) {\n    const coursesArray = this.formArr;\n    coursesArray.removeAt(index);\n  }\n  submitSchedule() {\n    if (this.scheduleForm.valid) {\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n    } else {\n      console.log(\"!ok\");\n    }\n  }\n};\nScheduleFormComponent = __decorate([Component({\n  selector: 'app-schedule-form',\n  templateUrl: './schedule-form.component.html',\n  styleUrls: ['./schedule-form.component.css']\n})], ScheduleFormComponent);\nexport { ScheduleFormComponent };","map":{"version":3,"names":["Component","Validators","timeRangeValidator","control","timeRange","value","min","max","timeRangePattern","match","invalidTimeRange","startTime","endTime","split","startHour","startMinute","endHour","endMinute","startHourNum","Number","startMinuteNum","endHourNum","endMinuteNum","isNaN","ScheduleFormComponent","formatTimeRange","timeF","timeT","Course","timeFrom","timeTo","get","setValue","toString","constructor","authService","formBuilder","weekdays","createContactForm","scheduleForm","group","owner","required","scheduleEntries","array","createScheduleEntryFormGroup","currentUser","userId","dayOfWeek","courses","createCourseFormGroup","time","course","minLength","formArr","formArr2","at","addRow","obj","addCol","addNewRow","obj1","push","clearValidators","addNewCol","ngOnInit","addCourse","coursesArray","removeCourse","index","removeAt","submitSchedule","valid","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-form\\schedule-form.component.ts"],"sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, FormArray, Validators, AbstractControl} from '@angular/forms';\nimport { ValidatorFn } from '@angular/forms';\nimport {AuthService} from \"../../services/auth.service\";\n\nfunction timeRangeValidator(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const timeRange = control.value;\n    const min = '7';\n    const max = '21';\n    if (!timeRange) {\n      return null; // Empty value, no validation needed\n    }\n\n    // Regular expression to match the time range format (hh:mm-hh:mm)\n    const timeRangePattern = /^\\d{2}:\\d{2}-\\d{2}:\\d{2}$/;\n\n    if (!timeRange.match(timeRangePattern)) {\n      return { invalidTimeRange: true }; // Invalid format\n    }\n\n    // Split the time range into start and end times\n    const [startTime, endTime] = timeRange.split('-');\n    const [startHour, startMinute] = startTime.split(':');\n    const [endHour, endMinute] = endTime.split(':');\n\n    // Convert the time components to numbers\n    const startHourNum = Number(startHour);\n    const startMinuteNum = Number(startMinute);\n    const endHourNum = Number(endHour);\n    const endMinuteNum = Number(endMinute);\n\n    // Check if the time components are valid\n    if (\n      isNaN(startHourNum) || isNaN(startMinuteNum) ||\n      isNaN(endHourNum) || isNaN(endMinuteNum) ||\n      startHourNum < 7 || startHourNum > 21 || startMinuteNum < 0 || startMinuteNum > 59 ||\n      endHourNum < startHourNum || endHourNum > 21 || endMinuteNum < startMinuteNum || endMinuteNum > 59\n    ) {\n      return { invalidTimeRange: true }; // Invalid time components\n    }\n\n    // Check if the start time is earlier than the end time\n    if (startHourNum > endHourNum || (startHourNum === endHourNum && startMinuteNum >= endMinuteNum)) {\n      return { invalidTimeRange: true }; // Start time is later or equal to end time\n    }\n\n    return null; // Valid time range\n  };\n}\n\n@Component({\n  selector: 'app-schedule-form',\n  templateUrl: './schedule-form.component.html',\n  styleUrls: ['./schedule-form.component.css']\n})\nexport class ScheduleFormComponent  implements OnInit {\n\n  scheduleForm!: FormGroup;\n  weekdays: string[] = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  formatTimeRange(timeF: HTMLInputElement,timeT: HTMLInputElement,Course: any): string {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    Course.get('time')?.setValue((timeFrom+\"-\"+timeTo).toString());\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(public authService: AuthService,private formBuilder: FormBuilder) {\n    this.createContactForm();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      scheduleEntries: this.formBuilder.array([this.createScheduleEntryFormGroup()])\n    });\n    this.scheduleForm.get('owner')?.setValue(this.authService.currentUser.userId);\n  }\n  createScheduleEntryFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  createCourseFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      time: ['',[Validators.required,timeRangeValidator()]],\n      course: ['',[Validators.required,Validators.minLength(2)]]\n    });\n  }\n  get formArr() {\n    return this.formArr2.at(0).get('courses') as FormArray;\n  }\n\n  get formArr2() {\n    return this.scheduleForm.get('scheduleEntries') as FormArray;\n  }\n  addRow({obj}: { obj: any }) {\n    return this.formBuilder.group({\n      time: [obj.time,[Validators.required,timeRangeValidator()]],\n      course: [obj.course,[Validators.required,timeRangeValidator()]],\n    });\n  }\n  addCol() {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  addNewRow() {\n    let obj1 = {\n      time: '',\n      course: '',\n    };\n    this.formArr.push(this.addRow({obj: obj1}));\n    this.formArr.clearValidators();\n\n  }\n  addNewCol() {\n    let obj1 = {\n      time: '',\n      course: '',\n    };\n    this.formArr2.push(this.addCol());\n    this.formArr2.clearValidators();\n\n  }\n  ngOnInit(): void {\n  }\n\n\n  addCourse(): void {\n    const coursesArray = this.scheduleForm.get('courses') as FormArray;\n    coursesArray.push(this.createCourseFormGroup());\n  }\n\n  removeCourse(index: number): void {\n    const coursesArray = this.formArr as FormArray;\n    coursesArray.removeAt(index);\n  }\n\n  submitSchedule(): void {\n    if (this.scheduleForm.valid) {\n\n        console.log(\"ok\");\n           // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n    }else{\n      console.log(\"!ok\");\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}