{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass MyItemsFilterPipe {\n  transform(value, filterText) {\n    if (!value) {\n      return [];\n    }\n    if (!filterText) {\n      return value;\n    }\n    filterText = filterText.toLowerCase();\n    return value.filter(val => {\n      return val.seller.toLowerCase().includes(filterText);\n    });\n  }\n}\nMyItemsFilterPipe.ɵfac = function MyItemsFilterPipe_Factory(t) {\n  return new (t || MyItemsFilterPipe)();\n};\nMyItemsFilterPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"myItemsFilter\",\n  type: MyItemsFilterPipe,\n  pure: true\n});\nexport { MyItemsFilterPipe };","map":{"version":3,"names":["MyItemsFilterPipe","transform","value","filterText","toLowerCase","filter","val","seller","includes","pure"],"sources":["E:\\Taw\\blog11\\blog\\blog\\src\\app\\pipes\\my-items-filter.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'myItemsFilter'\n})\nexport class MyItemsFilterPipe implements PipeTransform {\n\n  transform(value: any[], filterText: any): any {\n    if (!value) {\n      return [];\n    }\n    if (!filterText) {\n      return value;\n    }\n\n    filterText = filterText.toLowerCase();\n    return value.filter(val => {\n      return val.seller.toLowerCase().includes(filterText);\n    });\n  }\n}\n"],"mappings":";AAEA,MAGaA,iBAAiB;EAE5BC,SAASA,CAACC,KAAY,EAAEC,UAAe;IACrC,IAAI,CAACD,KAAK,EAAE;MACV,OAAO,EAAE;;IAEX,IAAI,CAACC,UAAU,EAAE;MACf,OAAOD,KAAK;;IAGdC,UAAU,GAAGA,UAAU,CAACC,WAAW,EAAE;IACrC,OAAOF,KAAK,CAACG,MAAM,CAACC,GAAG,IAAG;MACxB,OAAOA,GAAG,CAACC,MAAM,CAACH,WAAW,EAAE,CAACI,QAAQ,CAACL,UAAU,CAAC;IACtD,CAAC,CAAC;EACJ;;AAdWH,iBAAiB,C;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB,C;;QAAjBA,iBAAiB;EAAAS,IAAA;AAAA;SAAjBT,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}