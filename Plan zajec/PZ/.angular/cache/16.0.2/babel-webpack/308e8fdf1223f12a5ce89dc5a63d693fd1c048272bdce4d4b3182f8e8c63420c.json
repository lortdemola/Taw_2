{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet ScheduleFormComponent = class ScheduleFormComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.createContactForm();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      day: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  get formArr() {\n    return this.scheduleForm.get('courses');\n  }\n  get formArr2() {\n    return this.scheduleForm.get('day')?.get('courses');\n  }\n  ngOnInit() {}\n  createCourseFormGroup() {\n    return this.formBuilder.group({\n      time: ['', Validators.required],\n      course: ['', Validators.required]\n      // Add more fields as needed for each course\n    });\n  }\n\n  addCourse() {\n    const coursesArray = this.scheduleForm.get('courses');\n    coursesArray.push(this.createCourseFormGroup());\n  }\n  removeCourse(index) {\n    const coursesArray = this.scheduleForm.get('courses');\n    coursesArray.removeAt(index);\n  }\n  submitSchedule() {\n    if (this.scheduleForm.valid) {\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n    }\n  }\n};\nScheduleFormComponent = __decorate([Component({\n  selector: 'app-schedule-form',\n  templateUrl: './schedule-form.component.html',\n  styleUrls: ['./schedule-form.component.css']\n})], ScheduleFormComponent);\nexport { ScheduleFormComponent };","map":{"version":3,"names":["Component","Validators","ScheduleFormComponent","constructor","formBuilder","createContactForm","scheduleForm","group","owner","required","day","courses","array","createCourseFormGroup","formArr","get","formArr2","ngOnInit","time","course","addCourse","coursesArray","push","removeCourse","index","removeAt","submitSchedule","valid","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-form\\schedule-form.component.ts"],"sourcesContent":["import { Component , OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-schedule-form',\n  templateUrl: './schedule-form.component.html',\n  styleUrls: ['./schedule-form.component.css']\n})\nexport class ScheduleFormComponent  implements OnInit {\n\n  scheduleForm!: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.createContactForm();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      day: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  get formArr() {\n    return this.scheduleForm.get('courses') as FormArray;\n  }\n  get formArr2() {\n    return this.scheduleForm.get('day')?.get('courses') as FormArray;\n  }\n  ngOnInit(): void {\n  }\n\n  createCourseFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      time: ['', Validators.required],\n      course: ['', Validators.required],\n      // Add more fields as needed for each course\n    });\n  }\n\n  addCourse(): void {\n    const coursesArray = this.scheduleForm.get('courses') as FormArray;\n    coursesArray.push(this.createCourseFormGroup());\n  }\n\n  removeCourse(index: number): void {\n    const coursesArray = this.scheduleForm.get('courses') as FormArray;\n    coursesArray.removeAt(index);\n  }\n\n  submitSchedule(): void {\n    if (this.scheduleForm.valid) {\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAiB,eAAe;AAClD,SAA4CC,UAAU,QAAQ,gBAAgB;AAO9E,IAAaC,qBAAqB,GAAlC,MAAaA,qBAAqB;EAIhCC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAC7B,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EACAA,iBAAiBA,CAAA;IACf,IAAI,CAACC,YAAY,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACzCC,KAAK,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MAChCC,GAAG,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ,CAAC;MAC9BE,OAAO,EAAE,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC,CAAC,IAAI,CAACC,qBAAqB,EAAE,CAAC;KAC/D,CAAC;EACJ;EACA,IAAIC,OAAOA,CAAA;IACT,OAAO,IAAI,CAACR,YAAY,CAACS,GAAG,CAAC,SAAS,CAAc;EACtD;EACA,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACV,YAAY,CAACS,GAAG,CAAC,KAAK,CAAC,EAAEA,GAAG,CAAC,SAAS,CAAc;EAClE;EACAE,QAAQA,CAAA,GACR;EAEAJ,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACT,WAAW,CAACG,KAAK,CAAC;MAC5BW,IAAI,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACQ,QAAQ,CAAC;MAC/BU,MAAM,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACQ,QAAQ;MAChC;KACD,CAAC;EACJ;;EAEAW,SAASA,CAAA;IACP,MAAMC,YAAY,GAAG,IAAI,CAACf,YAAY,CAACS,GAAG,CAAC,SAAS,CAAc;IAClEM,YAAY,CAACC,IAAI,CAAC,IAAI,CAACT,qBAAqB,EAAE,CAAC;EACjD;EAEAU,YAAYA,CAACC,KAAa;IACxB,MAAMH,YAAY,GAAG,IAAI,CAACf,YAAY,CAACS,GAAG,CAAC,SAAS,CAAc;IAClEM,YAAY,CAACI,QAAQ,CAACD,KAAK,CAAC;EAC9B;EAEAE,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACpB,YAAY,CAACqB,KAAK,EAAE;MAC3B;MACA;IAAA;EAEJ;CACD;AA/CYzB,qBAAqB,GAAA0B,UAAA,EALjC5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACW7B,qBAAqB,CA+CjC;SA/CYA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}