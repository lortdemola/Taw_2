{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"../../services/data.service\";\nimport * as i3 from \"@angular/forms\";\nclass ScheduleAdminComponent {\n  formatTimeRange(timeF, timeT, Course) {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    Course.get('time')?.setValue((timeFrom + \"-\" + timeTo).toString());\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(authService, dataService, formBuilder) {\n    this.authService = authService;\n    this.dataService = dataService;\n    this.formBuilder = formBuilder;\n    this.weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    this.FormArray = FormArray;\n    this.AbstractControl = AbstractControl;\n    this.createContactForm();\n    this.loadSchedule();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      scheduleEntries: this.formBuilder.array([this.createScheduleEntryFormGroup()])\n    });\n    this.scheduleForm.get('owner')?.setValue(this.authService.currentUser.userId);\n  }\n  createScheduleEntryFormGroup() {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  createCourseFormGroup() {\n    return this.formBuilder.group({\n      timeFrom: ['', [Validators.required]],\n      timeTo: ['', [Validators.required]],\n      course: ['', [Validators.required, Validators.minLength(2)]]\n    });\n  }\n  get formArr() {\n    return this.formArr2.at(0).get('courses');\n  }\n  get formArr2() {\n    return this.scheduleForm.get('scheduleEntries');\n  }\n  former(x) {\n    return x.get('courses');\n  }\n  addRow({\n    obj\n  }) {\n    return this.formBuilder.group({\n      timeFrom: [obj.timeFrom, [Validators.required]],\n      timeTo: [obj.timeTo, [Validators.required]],\n      course: [obj.course, [Validators.required, Validators.minLength(2)]]\n    });\n  }\n  addCol() {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  addNewRow(t) {\n    let obj1 = {\n      timeFrom: '',\n      timeTo: '',\n      course: ''\n    };\n    t.get('courses').push(this.addRow({\n      obj: obj1\n    }));\n  }\n  addNewCol() {\n    if (this.formArr2.length < 6) {\n      this.formArr2.push(this.addCol());\n    }\n    return 0;\n  }\n  ngOnInit() {}\n  addCourse() {\n    const coursesArray = this.scheduleForm.get('courses');\n    coursesArray.push(this.createCourseFormGroup());\n  }\n  removeCourse(index, t) {\n    const coursesArray = t.get('courses');\n    coursesArray.removeAt(index);\n  }\n  removeDay(index) {\n    const coursesArray = this.formArr2;\n    coursesArray.removeAt(index);\n  }\n  loadSchedule() {\n    this.dataService.getScheduleAmountByUserId(this.authService.currentUser.userId).subscribe(data => {\n      console.log(data);\n      this.hmm = data;\n    });\n  }\n  submitSchedule() {\n    if (this.scheduleForm.valid) {\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n      this.dataService.createSchedule(this.scheduleForm.value).subscribe(() => {\n        console.log(\"created\");\n      });\n    } else {\n      console.log(\"!ok\");\n    }\n  }\n}\nScheduleAdminComponent.ɵfac = function ScheduleAdminComponent_Factory(t) {\n  return new (t || ScheduleAdminComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.DataService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nScheduleAdminComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleAdminComponent,\n  selectors: [[\"app-schedule-admin\"]],\n  decls: 2,\n  vars: 0,\n  template: function ScheduleAdminComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"schedule-admin works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ScheduleAdminComponent };","map":{"version":3,"names":["Validators","ScheduleAdminComponent","formatTimeRange","timeF","timeT","Course","timeFrom","value","timeTo","get","setValue","toString","constructor","authService","dataService","formBuilder","weekdays","FormArray","AbstractControl","createContactForm","loadSchedule","scheduleForm","group","owner","required","scheduleEntries","array","createScheduleEntryFormGroup","currentUser","userId","dayOfWeek","courses","createCourseFormGroup","course","minLength","formArr","formArr2","at","former","x","addRow","obj","addCol","addNewRow","t","obj1","push","addNewCol","length","ngOnInit","addCourse","coursesArray","removeCourse","index","removeAt","removeDay","getScheduleAmountByUserId","subscribe","data","console","log","hmm","submitSchedule","valid","createSchedule","i0","ɵɵdirectiveInject","i1","AuthService","i2","DataService","i3","FormBuilder","selectors","decls","vars","template","ScheduleAdminComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-admin\\schedule-admin.component.ts","C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-admin\\schedule-admin.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../../services/auth.service\";\nimport {DataService} from \"../../services/data.service\";\n\n@Component({\n  selector: 'app-schedule-admin',\n  templateUrl: './schedule-admin.component.html',\n  styleUrls: ['./schedule-admin.component.css']\n})\nexport class ScheduleAdminComponent implements OnInit {\n  hmm!:any;\n  scheduleForm!: FormGroup;\n  weekdays: string[] = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  formatTimeRange(timeF: HTMLInputElement,timeT: HTMLInputElement,Course: any): string {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    Course.get('time')?.setValue((timeFrom+\"-\"+timeTo).toString());\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(public authService: AuthService,private dataService: DataService,private formBuilder: FormBuilder) {\n    this.createContactForm();\n    this.loadSchedule();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      scheduleEntries: this.formBuilder.array([this.createScheduleEntryFormGroup()])\n    });\n    this.scheduleForm.get('owner')?.setValue(this.authService.currentUser.userId);\n  }\n  createScheduleEntryFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  createCourseFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      timeFrom: ['',[Validators.required]],\n      timeTo: ['',[Validators.required]],\n      course: ['',[Validators.required,Validators.minLength(2)]]\n    });\n  }\n  get formArr() {\n    return this.formArr2.at(0).get('courses') as FormArray;\n  }\n\n  get formArr2() {\n    return this.scheduleForm.get('scheduleEntries') as FormArray;\n  }\n\n  former(x: AbstractControl) {\n    return x.get('courses') as FormArray;\n  }\n  addRow({obj}: { obj: any }) {\n    return this.formBuilder.group({\n      timeFrom: [obj.timeFrom,[Validators.required]],\n      timeTo: [obj.timeTo,[Validators.required]],\n      course: [obj.course,[Validators.required,Validators.minLength(2)]],\n    });\n  }\n  addCol() {\n\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n\n  }\n  addNewRow(t : any) {\n    let obj1 = {\n      timeFrom: '',\n      timeTo: '',\n      course: '',\n    };\n    t.get('courses').push(this.addRow({obj: obj1}));\n\n\n  }\n  addNewCol() {\n    if(this.formArr2.length <6){\n      this.formArr2.push(this.addCol());\n\n    }\n    return 0;\n  }\n  ngOnInit(): void {\n  }\n\n\n  addCourse(): void {\n    const coursesArray = this.scheduleForm.get('courses') as FormArray;\n    coursesArray.push(this.createCourseFormGroup());\n  }\n\n  removeCourse(index: number,t : any): void {\n    const coursesArray = t.get('courses') as FormArray;\n    coursesArray.removeAt(index);\n  }\n  removeDay(index: number): void {\n    const coursesArray = this.formArr2 as FormArray;\n    coursesArray.removeAt(index);\n  }\n  loadSchedule() {\n    this.dataService.getScheduleAmountByUserId(this.authService.currentUser.userId).subscribe(data => {\n      console.log(data);\n      this.hmm = data;\n    });\n  }\n  submitSchedule(): void {\n    if (this.scheduleForm.valid) {\n\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n      this.dataService.createSchedule(this.scheduleForm.value).subscribe(()=>\n      {\n        console.log(\"created\");\n      });\n    }else{\n      console.log(\"!ok\");\n    }\n  }\n\n  protected readonly FormArray = FormArray;\n  protected readonly AbstractControl = AbstractControl;\n}\n","<p>schedule-admin works!</p>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}