{"ast":null,"code":"import { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:3000/api';\n  }\n  authenticate(credentials) {\n    return this.http.post(this.url + '/user/auth', {\n      login: credentials.login,\n      password: credentials.password\n    }).pipe(map(result => {\n      if (result && result.token) {\n        localStorage.setItem('token', result.token);\n        return true;\n      }\n      return false;\n    }));\n  }\n  createOrUpdate(credentials) {\n    console.log(credentials);\n    return this.http.post(this.url + '/user/create', credentials);\n  }\n  getUserById(id) {\n    return this.http.get(this.url + '/api/users/get/byId/' + id);\n  }\n  logout() {\n    return this.http.delete(this.url + '/user/logout/' + this.currentUser.userId).pipe(map(() => {\n      localStorage.removeItem('token');\n    }));\n  }\n  isLoggedIn() {\n    const jwtHelper = new JwtHelperService();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    return !jwtHelper.isTokenExpired(token);\n  }\n  get currentUser() {\n    const token = this.getToken();\n    if (!token) {\n      return null;\n    }\n    return new JwtHelperService().decodeToken(token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["JwtHelperService","map","AuthService","constructor","http","url","authenticate","credentials","post","login","password","pipe","result","token","localStorage","setItem","createOrUpdate","console","log","getUserById","id","get","logout","delete","currentUser","userId","removeItem","isLoggedIn","jwtHelper","getItem","isTokenExpired","getToken","decodeToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\nimport {map} from 'rxjs/operators';\nimport {Token} from \"../models/token\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private url = 'http://localhost:3000/api';\n\n  constructor(private http: HttpClient) {\n  }\n\n  authenticate(credentials: any) {\n\n    return this.http.post(this.url + '/user/auth', {\n      login: credentials.login,\n      password: credentials.password\n    }).pipe(\n      map((result: Token | any) => {\n        if (result && result.token) {\n          localStorage.setItem('token', result.token);\n          return true;\n        }\n        return false;\n      })\n    );\n  }\n  createOrUpdate(credentials: any) {\n    console.log(credentials)\n    return this.http.post(this.url + '/user/create', credentials);\n  }\n  getUserById(id: string) {\n    return this.http.get(this.url + '/api/users/get/byId/' + id);\n  }\n\n  logout() {\n    return this.http.delete(this.url + '/user/logout/' + this.currentUser.userId)\n      .pipe(\n        map(() => {\n          localStorage.removeItem('token');\n        })\n      );\n  }\n\n  isLoggedIn() {\n    const jwtHelper = new JwtHelperService();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    return !(jwtHelper.isTokenExpired(token));\n  }\n\n  get currentUser() {\n    const token = this.getToken();\n    if (!token) {\n      return null;\n    }\n\n    return new JwtHelperService().decodeToken(token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\n"],"mappings":"AAEA,SAAQA,gBAAgB,QAAO,oBAAoB;AACnD,SAAQC,GAAG,QAAO,gBAAgB;;;AAIlC,MAGaC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,GAAG,GAAG,2BAA2B;EAGzC;EAEAC,YAAYA,CAACC,WAAgB;IAE3B,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,IAAI,CAACH,GAAG,GAAG,YAAY,EAAE;MAC7CI,KAAK,EAAEF,WAAW,CAACE,KAAK;MACxBC,QAAQ,EAAEH,WAAW,CAACG;KACvB,CAAC,CAACC,IAAI,CACLV,GAAG,CAAEW,MAAmB,IAAI;MAC1B,IAAIA,MAAM,IAAIA,MAAM,CAACC,KAAK,EAAE;QAC1BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,MAAM,CAACC,KAAK,CAAC;QAC3C,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;EACAG,cAAcA,CAACT,WAAgB;IAC7BU,OAAO,CAACC,GAAG,CAACX,WAAW,CAAC;IACxB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,IAAI,CAACH,GAAG,GAAG,cAAc,EAAEE,WAAW,CAAC;EAC/D;EACAY,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAC,IAAI,CAAChB,GAAG,GAAG,sBAAsB,GAAGe,EAAE,CAAC;EAC9D;EAEAE,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAClB,IAAI,CAACmB,MAAM,CAAC,IAAI,CAAClB,GAAG,GAAG,eAAe,GAAG,IAAI,CAACmB,WAAW,CAACC,MAAM,CAAC,CAC1Ed,IAAI,CACHV,GAAG,CAAC,MAAK;MACPa,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAClC,CAAC,CAAC,CACH;EACL;EAEAC,UAAUA,CAAA;IACR,MAAMC,SAAS,GAAG,IAAI5B,gBAAgB,EAAE;IACxC,MAAMa,KAAK,GAAGC,YAAY,CAACe,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAAChB,KAAK,EAAE;MACV,OAAO,KAAK;;IAEd,OAAO,CAAEe,SAAS,CAACE,cAAc,CAACjB,KAAK,CAAE;EAC3C;EAEA,IAAIW,WAAWA,CAAA;IACb,MAAMX,KAAK,GAAG,IAAI,CAACkB,QAAQ,EAAE;IAC7B,IAAI,CAAClB,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb,OAAO,IAAIb,gBAAgB,EAAE,CAACgC,WAAW,CAACnB,KAAK,CAAC;EAClD;EAEAkB,QAAQA,CAAA;IACN,OAAOjB,YAAY,CAACe,OAAO,CAAC,OAAO,CAAC;EACtC;;AA3DW3B,WAAW,C;mBAAXA,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXlC,WAAW,C;SAAXA,WAAW;EAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPrC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}