{"ast":null,"code":"import { FormArray, AbstractControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"../../services/data.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nclass ScheduleAdminComponent {\n  formatTimeRange(timeF, timeT, Course) {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(authService, dataService, formBuilder) {\n    this.authService = authService;\n    this.dataService = dataService;\n    this.formBuilder = formBuilder;\n    this.hmm3 = this.formBuilder.group({});\n    this.weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    this.FormArray = FormArray;\n    this.AbstractControl = AbstractControl;\n    this.createContactForm();\n    this.loadSchedule();\n  }\n  ngOnInit() {}\n  createContactForm() {\n    this.scheduleList = this.formBuilder.group({\n      usersSchedule: this.formBuilder.array([this.createScheduleEntryFormGroup()])\n    });\n  }\n  createScheduleEntryFormGroup() {\n    return this.formBuilder.group({\n      name: '',\n      scheduleData: ''\n    });\n  }\n  get formArr2() {\n    return this.scheduleList.get('usersSchedule');\n  }\n  loadSchedule() {\n    this.dataService.getAllSchedules().subscribe(data => {\n      let temp = data;\n      let temp2;\n      for (const datum of temp) {\n        console.log(datum);\n        this.authService.getUserById(datum['owner']).subscribe(data2 => {\n          temp2 = data2;\n          console.log('User: ' + temp2['name']);\n          for (const sss of datum['scheduleEntries']) {\n            console.log(' Day: ' + sss['dayOfWeek'] + ' ,Courses Amount: ' + sss['courses'].length);\n            console.log('ok1');\n            this.formArr2.push(this.formBuilder.group({\n              name: [temp2['name']],\n              scheduleData: [sss['dayOfWeek']]\n            }));\n            console.log('ok2');\n          }\n          console.log('ok3');\n        });\n      }\n    });\n  }\n  submitSchedule() {\n    if (this.scheduleList.valid) {\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n      this.dataService.createSchedule(this.scheduleList.value).subscribe(() => {\n        console.log(\"created\");\n      });\n    } else {\n      console.log(\"!ok\");\n    }\n  }\n}\nScheduleAdminComponent.ɵfac = function ScheduleAdminComponent_Factory(t) {\n  return new (t || ScheduleAdminComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.DataService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nScheduleAdminComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleAdminComponent,\n  selectors: [[\"app-schedule-admin\"]],\n  decls: 10,\n  vars: 4,\n  consts: [[2, \"height\", \"88vh\", \"min-width\", \"100vw\", 3, \"formGroup\", \"ngSubmit\"], [\"formArrayName\", \"usersSchedule\", 1, \"row\"], [2, \"color\", \"white\"], [\"type\", \"button\", 1, \"btn\", \"btn-dark\", \"buttons\"], [\"type\", \"submit\", 1, \"btn\", \"btn-light\", \"buttons\"]],\n  template: function ScheduleAdminComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ScheduleAdminComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitSchedule();\n      });\n      i0.ɵɵelementStart(1, \"tbody\", 1)(2, \"tr\")(3, \"pre\", 2);\n      i0.ɵɵtext(4);\n      i0.ɵɵpipe(5, \"json\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"button\", 3);\n      i0.ɵɵtext(7, \"add Day\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 4);\n      i0.ɵɵtext(9, \"Submit\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.scheduleList);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 2, ctx.formArr2.value));\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormArrayName, i4.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ScheduleAdminComponent };","map":{"version":3,"names":["FormArray","AbstractControl","ScheduleAdminComponent","formatTimeRange","timeF","timeT","Course","timeFrom","value","timeTo","constructor","authService","dataService","formBuilder","hmm3","group","weekdays","createContactForm","loadSchedule","ngOnInit","scheduleList","usersSchedule","array","createScheduleEntryFormGroup","name","scheduleData","formArr2","get","getAllSchedules","subscribe","data","temp","temp2","datum","console","log","getUserById","data2","sss","length","push","submitSchedule","valid","createSchedule","i0","ɵɵdirectiveInject","i1","AuthService","i2","DataService","i3","FormBuilder","selectors","decls","vars","consts","template","ScheduleAdminComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ScheduleAdminComponent_Template_form_ngSubmit_0_listener","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-admin\\schedule-admin.component.ts","C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-admin\\schedule-admin.component.html"],"sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, FormArray, Validators, AbstractControl} from '@angular/forms';\nimport { ValidatorFn } from '@angular/forms';\nimport {AuthService} from \"../../services/auth.service\";\nimport {DataService} from \"../../services/data.service\";\n\n\n\n\n@Component({\n  selector: 'app-schedule-admin',\n  templateUrl: './schedule-admin.component.html',\n  styleUrls: ['./schedule-admin.component.css']\n})\nexport class ScheduleAdminComponent implements OnInit {\n  hmm!: any ;\n  hmm2!: any ;\n  hmm3: FormGroup = this.formBuilder.group({});\n  scheduleList!: FormGroup;\n  weekdays: string[] = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  formatTimeRange(timeF: HTMLInputElement,timeT: HTMLInputElement,Course: any): string {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(public authService: AuthService,private dataService: DataService,private formBuilder: FormBuilder) {\n    this.createContactForm();\n    this.loadSchedule();\n  }\n  ngOnInit(): void {\n  }\n\n  createContactForm() {\n    this.scheduleList = this.formBuilder.group({\n      usersSchedule: this.formBuilder.array([this.createScheduleEntryFormGroup()])\n    });\n  }\n  createScheduleEntryFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      name: '',\n      scheduleData: ''\n    });\n  }\n\n\n  get formArr2() {\n    return this.scheduleList.get('usersSchedule') as FormArray;\n  }\n\n  loadSchedule() {\n    this.dataService.getAllSchedules().subscribe(data => {\n\n      let temp:any = data as JSON;\n      let temp2:any;\n      \n      for (const datum of temp) {\n\n        console.log(datum)\n        this.authService.getUserById(datum['owner']).subscribe(data2=>\n        {\n          temp2=data2 as JSON;\n          console.log('User: '+temp2['name']);\n          for (const sss of datum['scheduleEntries']) {\n            console.log(' Day: '+sss['dayOfWeek']+' ,Courses Amount: '+sss['courses'].length);\n            console.log('ok1');\n            this.formArr2.push(this.formBuilder.group({\n              name: [temp2['name']],\n              scheduleData: [sss['dayOfWeek']]\n            }));\n            console.log('ok2');\n          }\n          console.log('ok3');\n        });\n      }\n\n\n\n\n\n\n\n\n    });\n  }\n  submitSchedule(): void {\n    if (this.scheduleList.valid) {\n\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n      this.dataService.createSchedule(this.scheduleList.value).subscribe(()=>\n      {\n        console.log(\"created\");\n      });\n    }else{\n      console.log(\"!ok\");\n    }\n  }\n\n  protected readonly FormArray = FormArray;\n  protected readonly AbstractControl = AbstractControl;\n}\n","<form style=\"height: 88vh;min-width: 100vw\" [formGroup]=\"scheduleList\" (ngSubmit)=\"submitSchedule()\">\n\n  <tbody class=\"row\" formArrayName=\"usersSchedule\">\n\n  <tr>\n    <pre style=\"color: white\">{{formArr2.value |json}}</pre>\n\n  </tr>\n  <button type=\"button\"  class=\"btn btn-dark buttons\">add Day</button>\n  <button class=\"btn btn-light buttons\" type=\"submit\">Submit</button>\n  </tbody>\n\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}