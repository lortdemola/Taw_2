{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormArray, AbstractControl } from '@angular/forms';\nlet ScheduleAdminComponent = class ScheduleAdminComponent {\n  formatTimeRange(timeF, timeT, Course) {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(authService, dataService, formBuilder) {\n    this.authService = authService;\n    this.dataService = dataService;\n    this.formBuilder = formBuilder;\n    this.hmm3 = this.formBuilder.group({});\n    this.weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    this.FormArray = FormArray;\n    this.AbstractControl = AbstractControl;\n    this.createContactForm();\n    this.loadSchedule();\n  }\n  ngOnInit() {}\n  createContactForm() {\n    this.scheduleList = this.formBuilder.group({\n      usersSchedule: this.formBuilder.array([])\n    });\n  }\n  get formArr2() {\n    return this.scheduleList.get('usersSchedule');\n  }\n  loadSchedule() {\n    this.dataService.getAllSchedules().subscribe(data => {\n      let temp = data;\n      let temp2;\n      for (const datum of temp) {\n        this.authService.getUserById(datum['owner']).subscribe(data2 => {\n          let schedule = '';\n          temp2 = data2;\n          for (const sss of datum['scheduleEntries']) {\n            schedule += sss['dayOfWeek'] + ' ,Courses Amount: ' + sss['courses'].length + '  |  ';\n          }\n          this.formArr2.push(this.formBuilder.group({\n            name: [temp2['name']],\n            scheduleData: [schedule]\n          }));\n        });\n      }\n    });\n  }\n  submitSchedule() {\n    if (this.scheduleList.valid) {\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n      this.dataService.createSchedule(this.scheduleList.value).subscribe(() => {\n        console.log(\"created\");\n      });\n    } else {\n      console.log(\"!ok\");\n    }\n  }\n};\nScheduleAdminComponent = __decorate([Component({\n  selector: 'app-schedule-admin',\n  templateUrl: './schedule-admin.component.html',\n  styleUrls: ['./schedule-admin.component.css']\n})], ScheduleAdminComponent);\nexport { ScheduleAdminComponent };","map":{"version":3,"names":["Component","FormArray","AbstractControl","ScheduleAdminComponent","formatTimeRange","timeF","timeT","Course","timeFrom","value","timeTo","constructor","authService","dataService","formBuilder","hmm3","group","weekdays","createContactForm","loadSchedule","ngOnInit","scheduleList","usersSchedule","array","formArr2","get","getAllSchedules","subscribe","data","temp","temp2","datum","getUserById","data2","schedule","sss","length","push","name","scheduleData","submitSchedule","valid","console","log","createSchedule","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-admin\\schedule-admin.component.ts"],"sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, FormArray, Validators, AbstractControl} from '@angular/forms';\nimport { ValidatorFn } from '@angular/forms';\nimport {AuthService} from \"../../services/auth.service\";\nimport {DataService} from \"../../services/data.service\";\n\n\n\n\n@Component({\n  selector: 'app-schedule-admin',\n  templateUrl: './schedule-admin.component.html',\n  styleUrls: ['./schedule-admin.component.css']\n})\nexport class ScheduleAdminComponent implements OnInit {\n  hmm!: any ;\n  hmm2!: any ;\n  hmm3: FormGroup = this.formBuilder.group({});\n  scheduleList!: FormGroup;\n  weekdays: string[] = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  formatTimeRange(timeF: HTMLInputElement,timeT: HTMLInputElement,Course: any): string {\n    const timeFrom = timeF.value;\n    const timeTo = timeT.value;\n    return `${timeFrom} - ${timeTo}`;\n  }\n  constructor(public authService: AuthService,private dataService: DataService,private formBuilder: FormBuilder) {\n    this.createContactForm();\n    this.loadSchedule();\n  }\n  ngOnInit(): void {\n  }\n\n  createContactForm() {\n    this.scheduleList = this.formBuilder.group({\n      usersSchedule: this.formBuilder.array([])\n    });\n  }\n\n\n\n  get formArr2() {\n    return this.scheduleList.get('usersSchedule') as FormArray;\n  }\n\n  loadSchedule() {\n    this.dataService.getAllSchedules().subscribe(data => {\n\n      let temp:any = data as JSON;\n      let temp2:any;\n\n      for (const datum of temp) {\n\n        this.authService.getUserById(datum['owner']).subscribe(data2=>\n        {\n          let schedule: string = '';\n          temp2=data2 as JSON;\n\n          for (const sss of datum['scheduleEntries']) {\n\n            schedule += sss['dayOfWeek']+' ,Courses Amount: '+sss['courses'].length+'  |  ';\n\n          }\n          this.formArr2.push(this.formBuilder.group({\n            name: [temp2['name']],\n            scheduleData: [schedule]\n          }));\n\n\n        });\n      }\n\n\n\n\n\n\n\n\n    });\n  }\n  submitSchedule(): void {\n    if (this.scheduleList.valid) {\n\n      console.log(\"ok\");\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n      this.dataService.createSchedule(this.scheduleList.value).subscribe(()=>\n      {\n        console.log(\"created\");\n      });\n    }else{\n      console.log(\"!ok\");\n    }\n  }\n\n  protected readonly FormArray = FormArray;\n  protected readonly AbstractControl = AbstractControl;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}