{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction ScheduleFormComponent_tr_2_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"label\", 11);\n    i0.ɵɵtext(2, \"Time:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 12);\n    i0.ɵɵelementStart(4, \"label\", 13);\n    i0.ɵɵtext(5, \"Course:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 14);\n    i0.ɵɵelementStart(7, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ScheduleFormComponent_tr_2_div_8_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const i_r5 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.removeCourse(i_r5));\n    });\n    i0.ɵɵtext(8, \"Remove Course 1\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r5);\n  }\n}\nfunction ScheduleFormComponent_tr_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 4)(1, \"td\")(2, \"label\", 5);\n    i0.ɵɵtext(3, \"dayOfWeek:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"label\", 7);\n    i0.ɵɵtext(7, \"dayOfWeek:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, ScheduleFormComponent_tr_2_div_8_Template, 9, 1, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ScheduleFormComponent_tr_2_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.addNewRow());\n    });\n    i0.ɵɵtext(10, \"add Course 1\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ScheduleFormComponent_tr_2_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const x_r2 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.removeCourse(x_r2));\n    });\n    i0.ɵɵtext(12, \"Remove Course 2\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const x_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", x_r2);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.formArr.controls);\n  }\n}\nclass ScheduleFormComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    this.createContactForm();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      scheduleEntries: this.formBuilder.array([this.createScheduleEntryFormGroup()])\n    });\n  }\n  createScheduleEntryFormGroup() {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  createCourseFormGroup() {\n    return this.formBuilder.group({\n      time: ['', Validators.required],\n      course: ['', Validators.required]\n    });\n  }\n  get formArr() {\n    return this.formArr2.length;\n  }\n  get formArr2() {\n    return this.scheduleForm.get('scheduleEntries');\n  }\n  addRow({\n    obj\n  }) {\n    return this.formBuilder.group({\n      time: [obj.time],\n      course: [obj.course]\n    });\n  }\n  addNewRow() {\n    let obj1 = {\n      time: '1',\n      course: '2'\n    };\n    this.formArr.push(this.addRow({\n      obj: obj1\n    }));\n  }\n  ngOnInit() {}\n  addCourse() {\n    const coursesArray = this.scheduleForm.get('courses');\n    coursesArray.push(this.createCourseFormGroup());\n  }\n  removeCourse(index) {\n    const coursesArray = this.scheduleForm.get('courses');\n    coursesArray.removeAt(index);\n  }\n  submitSchedule() {\n    if (this.scheduleForm.valid) {\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n    }\n  }\n}\nScheduleFormComponent.ɵfac = function ScheduleFormComponent_Factory(t) {\n  return new (t || ScheduleFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nScheduleFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleFormComponent,\n  selectors: [[\"app-schedule-form\"]],\n  decls: 11,\n  vars: 8,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"formArrayName\", \"scheduleEntries\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [3, \"formGroupName\"], [\"for\", \"dayOfWeek\"], [\"type\", \"text\", \"id\", \"dayOfWeek\", \"formControlName\", \"dayOfWeek\"], [\"for\", \"2222\"], [\"id\", \"2222\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [\"id\", \"2222\", 3, \"formGroupName\"], [\"for\", \"time\"], [\"type\", \"text\", \"id\", \"time\", \"formControlName\", \"time\"], [\"for\", \"course\"], [\"type\", \"text\", \"id\", \"course\", \"formControlName\", \"course\"]],\n  template: function ScheduleFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ScheduleFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitSchedule();\n      });\n      i0.ɵɵelementStart(1, \"tbody\", 1);\n      i0.ɵɵtemplate(2, ScheduleFormComponent_tr_2_Template, 13, 2, \"tr\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 3);\n      i0.ɵɵtext(4, \"Submit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"pre\");\n      i0.ɵɵtext(6);\n      i0.ɵɵpipe(7, \"json\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"pre\");\n      i0.ɵɵtext(9);\n      i0.ɵɵpipe(10, \"json\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.scheduleForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.formArr2.controls);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(7, 4, ctx.scheduleForm.value));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 6, ctx.formArr.value));\n    }\n  },\n  dependencies: [i2.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName, i2.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ScheduleFormComponent };","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","ScheduleFormComponent_tr_2_div_8_Template_button_click_7_listener","restoredCtx","ɵɵrestoreView","_r7","i_r5","index","ctx_r6","ɵɵnextContext","ɵɵresetView","removeCourse","ɵɵproperty","ɵɵtemplate","ScheduleFormComponent_tr_2_div_8_Template","ScheduleFormComponent_tr_2_Template_button_click_9_listener","_r9","ctx_r8","addNewRow","ScheduleFormComponent_tr_2_Template_button_click_11_listener","x_r2","ctx_r10","ɵɵadvance","ctx_r0","formArr","controls","ScheduleFormComponent","constructor","formBuilder","weekdays","createContactForm","scheduleForm","group","owner","required","scheduleEntries","array","createScheduleEntryFormGroup","dayOfWeek","courses","createCourseFormGroup","time","course","formArr2","length","get","addRow","obj","obj1","push","ngOnInit","addCourse","coursesArray","removeAt","submitSchedule","valid","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","ScheduleFormComponent_Template","rf","ctx","ScheduleFormComponent_Template_form_ngSubmit_0_listener","ScheduleFormComponent_tr_2_Template","ɵɵtextInterpolate","ɵɵpipeBind1","value"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-form\\schedule-form.component.ts","C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-form\\schedule-form.component.html"],"sourcesContent":["import { Component , OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-schedule-form',\n  templateUrl: './schedule-form.component.html',\n  styleUrls: ['./schedule-form.component.css']\n})\nexport class ScheduleFormComponent  implements OnInit {\n\n  scheduleForm!: FormGroup;\n  weekdays: string[] = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  constructor(private formBuilder: FormBuilder) {\n    this.createContactForm();\n  }\n  createContactForm() {\n    this.scheduleForm = this.formBuilder.group({\n      owner: ['', Validators.required],\n      scheduleEntries: this.formBuilder.array([this.createScheduleEntryFormGroup()])\n    });\n  }\n  createScheduleEntryFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      dayOfWeek: ['', Validators.required],\n      courses: this.formBuilder.array([this.createCourseFormGroup()])\n    });\n  }\n  createCourseFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      time: ['', Validators.required],\n      course: ['', Validators.required]\n    });\n  }\n  get formArr() {\n    return this.formArr2.length;\n  }\n  get formArr2() {\n    return this.scheduleForm.get('scheduleEntries') as FormArray;\n  }\n  addRow({obj}: { obj: any }) {\n    return this.formBuilder.group({\n      time: [obj.time],\n      course: [obj.course],\n    });\n  }\n  addNewRow() {\n    let obj1 = {\n      time: '1',\n      course: '2',\n    };\n    this.formArr.push(this.addRow({obj: obj1}));\n  }\n\n  ngOnInit(): void {\n  }\n\n\n  addCourse(): void {\n    const coursesArray = this.scheduleForm.get('courses') as FormArray;\n    coursesArray.push(this.createCourseFormGroup());\n  }\n\n  removeCourse(index: number): void {\n    const coursesArray = this.scheduleForm.get('courses') as FormArray;\n    coursesArray.removeAt(index);\n  }\n\n  submitSchedule(): void {\n    if (this.scheduleForm.valid) {\n      // Send the form data to your backend API for saving to the database\n      // You can use Angular's HttpClient to make the API request\n    }\n  }\n}\n","<form [formGroup]=\"scheduleForm\" (ngSubmit)=\"submitSchedule()\">\n  <tbody formArrayName=\"scheduleEntries\">\n  <tr *ngFor=\"let course of formArr2.controls; let x = index;\" [formGroupName]=\"x\">\n    <td>\n      <label for=\"dayOfWeek\">dayOfWeek:</label>\n      <input type=\"text\" id=\"dayOfWeek\" formControlName=\"dayOfWeek\" />\n    </td>\n    <td>\n      <label for=\"2222\">dayOfWeek:</label>\n        <div  id=\"2222\" *ngFor=\"let course of formArr.controls; let i = index;\" [formGroupName]=\"i\">\n\n            <label for=\"time\">Time:</label>\n            <input type=\"text\" id=\"time\" formControlName=\"time\" />\n\n            <label for=\"course\">Course:</label>\n            <input type=\"text\" id=\"course\" formControlName=\"course\" />\n\n          <button type=\"button\" (click)=\"removeCourse(i)\">Remove Course 1</button>\n        </div>\n    </td>\n    <button type=\"button\" (click)=\"addNewRow()\">add Course 1</button>\n    <button type=\"button\" (click)=\"removeCourse(x)\">Remove Course 2</button>\n  </tr>\n  </tbody>\n\n  <button type=\"submit\">Submit</button>\n  <pre>{{ scheduleForm.value | json }}</pre>\n  <pre>{{ formArr.value | json }}</pre>\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}