{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction ScheduleFormComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"label\", 9);\n    i0.ɵɵtext(3, \"Time:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 10);\n    i0.ɵɵelementStart(5, \"label\", 11);\n    i0.ɵɵtext(6, \"Course:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const course_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", course_r1.time, \" \");\n  }\n}\nclass ScheduleFormComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.scheduleForm = this.fb.group({\n      owner: ['', Validators.required],\n      day: ['', Validators.required],\n      courses: this.fb.array([this.createCourse()])\n    });\n  }\n  ngOnInit() {\n    this.scheduleForm = this.fb.group({\n      owner: ['', Validators.required],\n      day: ['', Validators.required],\n      courses: this.fb.array([this.createCourse()])\n    });\n  }\n  createCourse() {\n    return this.fb.group({\n      time: ['', Validators.required],\n      course: ['', Validators.required]\n    });\n  }\n  addCourse() {\n    const courses = this.scheduleForm.get('courses');\n    courses.push(this.createCourse());\n  }\n  onSubmit() {\n    if (this.scheduleForm.valid) {\n      // Handle the form submission here, e.g., send the data to the backend\n      const formData = this.scheduleForm.value;\n      // Send the formData to your backend API\n    }\n  }\n}\n\nScheduleFormComponent.ɵfac = function ScheduleFormComponent_Factory(t) {\n  return new (t || ScheduleFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nScheduleFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleFormComponent,\n  selectors: [[\"app-schedule-form\"]],\n  decls: 15,\n  vars: 1,\n  consts: [[3, \"ngSubmit\"], [\"for\", \"owner\"], [\"type\", \"text\", \"id\", \"owner\", \"formControlName\", \"owner\", \"required\", \"\"], [\"for\", \"day\"], [\"type\", \"text\", \"id\", \"day\", \"formControlName\", \"day\", \"required\", \"\"], [\"formArrayName\", \"courses\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"submit\"], [\"for\", \"time\"], [\"type\", \"text\", \"id\", \"time\", \"formControlName\", \"time\", \"required\", \"\"], [\"for\", \"course\"], [\"type\", \"text\", \"id\", \"course\", \"formControlName\", \"course\", \"required\", \"\"]],\n  template: function ScheduleFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ScheduleFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n      i0.ɵɵtext(3, \"Owner ID:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\")(6, \"label\", 3);\n      i0.ɵɵtext(7, \"Day:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 5);\n      i0.ɵɵtemplate(10, ScheduleFormComponent_div_10_Template, 8, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function ScheduleFormComponent_Template_button_click_11_listener() {\n        return ctx.addCourse();\n      });\n      i0.ɵɵtext(12, \"Add Course\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 8);\n      i0.ɵɵtext(14, \"Add Schedule Entry\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.scheduleForm);\n    }\n  },\n  dependencies: [i2.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ScheduleFormComponent };","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","course_r1","time","ScheduleFormComponent","constructor","fb","scheduleForm","group","owner","required","day","courses","array","createCourse","ngOnInit","course","addCourse","get","push","onSubmit","valid","formData","value","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","ScheduleFormComponent_Template","rf","ctx","ɵɵlistener","ScheduleFormComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","ScheduleFormComponent_div_10_Template","ScheduleFormComponent_Template_button_click_11_listener","ɵɵproperty"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-form\\schedule-form.component.ts","C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\schedule-form\\schedule-form.component.html"],"sourcesContent":["import { Component , OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-schedule-form',\n  templateUrl: './schedule-form.component.html',\n  styleUrls: ['./schedule-form.component.css']\n})\nexport class ScheduleFormComponent  implements OnInit {\n\n  scheduleForm: FormGroup = this.fb.group({\n    owner: ['', Validators.required],\n    day: ['', Validators.required],\n    courses: this.fb.array([this.createCourse()])\n  });\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.scheduleForm = this.fb.group({\n      owner: ['', Validators.required],\n      day: ['', Validators.required],\n      courses: this.fb.array([this.createCourse()])\n    });\n  }\n\n  createCourse(): FormGroup {\n    return this.fb.group({\n      time: ['', Validators.required],\n      course: ['', Validators.required]\n    });\n  }\n\n  addCourse() {\n    const courses = this.scheduleForm.get('courses') as FormArray;\n    courses.push(this.createCourse());\n  }\n\n  onSubmit() {\n    if (this.scheduleForm.valid) {\n      // Handle the form submission here, e.g., send the data to the backend\n      const formData = this.scheduleForm.value;\n      // Send the formData to your backend API\n    }\n  }\n}\n","<!-- schedule-entry-form.component.html -->\n<form (ngSubmit)=\"onSubmit()\">\n  <div>\n    <label for=\"owner\">Owner ID:</label>\n    <input type=\"text\" id=\"owner\" formControlName=\"owner\" required>\n  </div>\n  <div>\n    <label for=\"day\">Day:</label>\n    <input type=\"text\" id=\"day\" formControlName=\"day\" required>\n  </div>\n  <div formArrayName=\"courses\">\n    <div *ngFor=\"let course of scheduleForm\">\n      {{ course.time }}\n        <label for=\"time\">Time:</label>\n        <input type=\"text\" id=\"time\" formControlName=\"time\" required>\n        <label for=\"course\">Course:</label>\n        <input type=\"text\" id=\"course\" formControlName=\"course\" required>\n      </div>\n    </div>\n  \n  <button type=\"button\" (click)=\"addCourse()\">Add Course</button>\n  <button type=\"submit\">Add Schedule Entry</button>\n</form>\n"],"mappings":"AACA,SAA4CA,UAAU,QAAQ,gBAAgB;;;;;;ICU1EC,EAAA,CAAAC,cAAA,UAAyC;IACvCD,EAAA,CAAAE,MAAA,GACE;IAAAF,EAAA,CAAAC,cAAA,eAAkB;IAAAD,EAAA,CAAAE,MAAA,YAAK;IAAAF,EAAA,CAAAG,YAAA,EAAQ;IAC/BH,EAAA,CAAAI,SAAA,gBAA6D;IAC7DJ,EAAA,CAAAC,cAAA,gBAAoB;IAAAD,EAAA,CAAAE,MAAA,cAAO;IAAAF,EAAA,CAAAG,YAAA,EAAQ;IACnCH,EAAA,CAAAI,SAAA,gBAAiE;IACnEJ,EAAA,CAAAG,YAAA,EAAM;;;;IALNH,EAAA,CAAAK,SAAA,GACE;IADFL,EAAA,CAAAM,kBAAA,MAAAC,SAAA,CAAAC,IAAA,MACE;;;ADVR,MAKaC,qBAAqB;EAQhCC,YAAoBC,EAAe;IAAf,KAAAA,EAAE,GAAFA,EAAE;IANtB,KAAAC,YAAY,GAAc,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACgB,QAAQ,CAAC;MAChCC,GAAG,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACgB,QAAQ,CAAC;MAC9BE,OAAO,EAAE,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC,CAAC,IAAI,CAACC,YAAY,EAAE,CAAC;KAC7C,CAAC;EAEqC;EAEvCC,QAAQA,CAAA;IACN,IAAI,CAACR,YAAY,GAAG,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAChCC,KAAK,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACgB,QAAQ,CAAC;MAChCC,GAAG,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACgB,QAAQ,CAAC;MAC9BE,OAAO,EAAE,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC,CAAC,IAAI,CAACC,YAAY,EAAE,CAAC;KAC7C,CAAC;EACJ;EAEAA,YAAYA,CAAA;IACV,OAAO,IAAI,CAACR,EAAE,CAACE,KAAK,CAAC;MACnBL,IAAI,EAAE,CAAC,EAAE,EAAET,UAAU,CAACgB,QAAQ,CAAC;MAC/BM,MAAM,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACgB,QAAQ;KACjC,CAAC;EACJ;EAEAO,SAASA,CAAA;IACP,MAAML,OAAO,GAAG,IAAI,CAACL,YAAY,CAACW,GAAG,CAAC,SAAS,CAAc;IAC7DN,OAAO,CAACO,IAAI,CAAC,IAAI,CAACL,YAAY,EAAE,CAAC;EACnC;EAEAM,QAAQA,CAAA;IACN,IAAI,IAAI,CAACb,YAAY,CAACc,KAAK,EAAE;MAC3B;MACA,MAAMC,QAAQ,GAAG,IAAI,CAACf,YAAY,CAACgB,KAAK;MACxC;;EAEJ;;;AApCWnB,qBAAqB,C;mBAArBA,qBAAqB,EAAAT,EAAA,CAAA6B,iBAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;AAArBtB,qBAAqB,C;QAArBA,qBAAqB;EAAAuB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCPlCtC,EAAA,CAAAC,cAAA,cAA8B;MAAxBD,EAAA,CAAAwC,UAAA,sBAAAC,wDAAA;QAAA,OAAYF,GAAA,CAAAd,QAAA,EAAU;MAAA,EAAC;MAC3BzB,EAAA,CAAAC,cAAA,UAAK;MACgBD,EAAA,CAAAE,MAAA,gBAAS;MAAAF,EAAA,CAAAG,YAAA,EAAQ;MACpCH,EAAA,CAAAI,SAAA,eAA+D;MACjEJ,EAAA,CAAAG,YAAA,EAAM;MACNH,EAAA,CAAAC,cAAA,UAAK;MACcD,EAAA,CAAAE,MAAA,WAAI;MAAAF,EAAA,CAAAG,YAAA,EAAQ;MAC7BH,EAAA,CAAAI,SAAA,eAA2D;MAC7DJ,EAAA,CAAAG,YAAA,EAAM;MACNH,EAAA,CAAAC,cAAA,aAA6B;MAC3BD,EAAA,CAAA0C,UAAA,KAAAC,qCAAA,iBAMQ;MACR3C,EAAA,CAAAG,YAAA,EAAM;MAERH,EAAA,CAAAC,cAAA,iBAA4C;MAAtBD,EAAA,CAAAwC,UAAA,mBAAAI,wDAAA;QAAA,OAASL,GAAA,CAAAjB,SAAA,EAAW;MAAA,EAAC;MAACtB,EAAA,CAAAE,MAAA,kBAAU;MAAAF,EAAA,CAAAG,YAAA,EAAS;MAC/DH,EAAA,CAAAC,cAAA,iBAAsB;MAAAD,EAAA,CAAAE,MAAA,0BAAkB;MAAAF,EAAA,CAAAG,YAAA,EAAS;;;MAVvBH,EAAA,CAAAK,SAAA,IAAe;MAAfL,EAAA,CAAA6C,UAAA,YAAAN,GAAA,CAAA3B,YAAA,CAAe;;;;;;SDH9BH,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}