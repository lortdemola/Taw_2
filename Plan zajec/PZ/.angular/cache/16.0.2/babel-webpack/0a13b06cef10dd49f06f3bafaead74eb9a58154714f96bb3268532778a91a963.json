{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"../../services/data.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction TeamsComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 9)(2, \"label\", 10);\n    i0.ɵɵtext(3, \"Time:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 11);\n    i0.ɵɵelementStart(5, \"label\", 12);\n    i0.ɵɵtext(6, \"Course:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n  }\n}\nclass TeamsComponent {\n  constructor(authService, dataService) {\n    this.authService = authService;\n    this.dataService = dataService;\n    this.teams = [];\n    this.newTeamData = {\n      name: ''\n    }; // Data for creating a new team\n    this.editTeamData = {}; // Data for editing a team\n    this.selectedTeamId = null; // Store the ID of the selected team for editing\n  } // Inject DataService\n  ngOnInit() {\n    this.loadTeams();\n  }\n  loadTeams() {\n    this.dataService.getTeamsByUserId(this.authService.currentUser.userId).subscribe(data => {\n      this.teams = data;\n    });\n  }\n  createTeam() {\n    this.dataService.createTeam(this.newTeamData).subscribe(() => {\n      this.loadTeams(); // Reload the list of teams after creating one\n      this.newTeamData = {\n        name: ''\n      };\n    });\n  }\n  editTeam(id) {\n    this.selectedTeamId = id;\n    this.dataService.getTeamById(id).subscribe(data => {\n      this.editTeamData = data;\n    });\n  }\n  updateTeam() {\n    if (this.selectedTeamId) {\n      this.dataService.updateTeam(this.selectedTeamId, this.editTeamData).subscribe(() => {\n        this.loadTeams(); // Reload the list of teams after updating one\n        this.editTeamData = {}; // Clear the form\n        this.selectedTeamId = null; // Reset the selected team\n      });\n    }\n  }\n\n  deleteTeam(id) {\n    this.dataService.deleteTeam(id).subscribe(() => {\n      this.loadTeams(); // Reload the list of teams after deleting one\n    });\n  }\n  // Add more methods for adding/removing members or other functionality\n  cancelEdit() {\n    this.editTeamData = {}; // Clear the form\n    this.selectedTeamId = null; // Reset the selected team\n  }\n}\n\nTeamsComponent.ɵfac = function TeamsComponent_Factory(t) {\n  return new (t || TeamsComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.DataService));\n};\nTeamsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TeamsComponent,\n  selectors: [[\"app-teams\"]],\n  decls: 15,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"owner\"], [\"type\", \"text\", \"id\", \"owner\", \"formControlName\", \"owner\", \"required\", \"\"], [\"for\", \"day\"], [\"type\", \"text\", \"id\", \"day\", \"formControlName\", \"day\", \"required\", \"\"], [\"formArrayName\", \"courses\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"submit\"], [3, \"formGroupName\"], [\"for\", \"time\"], [\"type\", \"text\", \"id\", \"time\", \"formControlName\", \"time\", \"required\", \"\"], [\"for\", \"course\"], [\"type\", \"text\", \"id\", \"course\", \"formControlName\", \"course\", \"required\", \"\"]],\n  template: function TeamsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function TeamsComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n      i0.ɵɵtext(3, \"Owner ID:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\")(6, \"label\", 3);\n      i0.ɵɵtext(7, \"Day:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 5);\n      i0.ɵɵtemplate(10, TeamsComponent_div_10_Template, 8, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function TeamsComponent_Template_button_click_11_listener() {\n        return ctx.addCourse();\n      });\n      i0.ɵɵtext(12, \"Add Course\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 8);\n      i0.ɵɵtext(14, \"Add Schedule Entry\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.scheduleForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.courses.controls);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { TeamsComponent };","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","i_r2","TeamsComponent","constructor","authService","dataService","teams","newTeamData","name","editTeamData","selectedTeamId","ngOnInit","loadTeams","getTeamsByUserId","currentUser","userId","subscribe","data","createTeam","editTeam","id","getTeamById","updateTeam","deleteTeam","cancelEdit","ɵɵdirectiveInject","i1","AuthService","i2","DataService","selectors","decls","vars","consts","template","TeamsComponent_Template","rf","ctx","ɵɵlistener","TeamsComponent_Template_form_ngSubmit_0_listener","onSubmit","ɵɵtemplate","TeamsComponent_div_10_Template","TeamsComponent_Template_button_click_11_listener","addCourse","scheduleForm","courses","controls"],"sources":["C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\teams\\teams.component.ts","C:\\Users\\kacpe\\Desktop\\TAW12\\Aplikacja - plan zajęć\\Plan zajec\\PZ\\src\\app\\components\\teams\\teams.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {DataService} from \"../../services/data.service\";\nimport {AuthService} from \"../../services/auth.service\";\n\n\n@Component({\n  selector: 'app-teams',\n  templateUrl: './teams.component.html',\n  styleUrls: ['./teams.component.css']\n})\nexport class TeamsComponent implements OnInit {\n  teams: any[] = [];\n  newTeamData = {name:''}; // Data for creating a new team\n  editTeamData: any = {}; // Data for editing a team\n  selectedTeamId: string | null = null; // Store the ID of the selected team for editing\n\n  constructor(public authService: AuthService,private dataService: DataService) {} // Inject DataService\n\n  ngOnInit() {\n    this.loadTeams();\n  }\n\n  loadTeams() {\n    this.dataService.getTeamsByUserId(this.authService.currentUser.userId).subscribe((data: any) => {\n      this.teams = data;\n    });\n  }\n\n  createTeam() {\n    this.dataService.createTeam(this.newTeamData).subscribe(() => {\n      this.loadTeams(); // Reload the list of teams after creating one\n      this.newTeamData = {name:''};\n    });\n  }\n\n  editTeam(id: string) {\n    this.selectedTeamId = id;\n    this.dataService.getTeamById(id).subscribe((data: any) => {\n      this.editTeamData = data;\n    });\n  }\n\n  updateTeam() {\n    if (this.selectedTeamId) {\n      this.dataService.updateTeam(this.selectedTeamId, this.editTeamData).subscribe(() => {\n        this.loadTeams(); // Reload the list of teams after updating one\n        this.editTeamData = {}; // Clear the form\n        this.selectedTeamId = null; // Reset the selected team\n      });\n    }\n  }\n\n  deleteTeam(id: string) {\n    this.dataService.deleteTeam(id).subscribe(() => {\n      this.loadTeams(); // Reload the list of teams after deleting one\n    });\n  }\n\n  // Add more methods for adding/removing members or other functionality\n\n  cancelEdit() {\n    this.editTeamData = {}; // Clear the form\n    this.selectedTeamId = null; // Reset the selected team\n  }\n}\n","<form [formGroup]=\"scheduleForm\" (ngSubmit)=\"onSubmit()\">\n  <div>\n    <label for=\"owner\">Owner ID:</label>\n    <input type=\"text\" id=\"owner\" formControlName=\"owner\" required>\n  </div>\n  <div>\n    <label for=\"day\">Day:</label>\n    <input type=\"text\" id=\"day\" formControlName=\"day\" required>\n  </div>\n  <div formArrayName=\"courses\">\n    <div *ngFor=\"let course of courses.controls; let i = index\">\n      <div [formGroupName]=\"i\">\n        <label for=\"time\">Time:</label>\n        <input type=\"text\" id=\"time\" formControlName=\"time\" required>\n        <label for=\"course\">Course:</label>\n        <input type=\"text\" id=\"course\" formControlName=\"course\" required>\n      </div>\n    </div>\n  </div>\n  <button type=\"button\" (click)=\"addCourse()\">Add Course</button>\n  <button type=\"submit\">Add Schedule Entry</button>\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}